"""
–ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
"""
import asyncio
import subprocess
from sqlalchemy import text
from app.database.models import engine

async def fix_database():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ë–î"""
    print("üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ psql —Å –ø—Ä–∞–≤–∞–º–∏ postgres
    sql_commands = """
    -- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É users –µ—Å–ª–∏ –µ—Å—Ç—å
    DROP TABLE IF EXISTS users CASCADE;

    -- –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    CREATE TABLE users (
        id SERIAL PRIMARY KEY,
        user_id BIGINT UNIQUE NOT NULL,
        username VARCHAR(100),
        first_name VARCHAR(100),
        last_name VARCHAR(100),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        is_blocked BOOLEAN DEFAULT FALSE
    );

    -- –î–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é crypto_user
    GRANT ALL PRIVILEGES ON TABLE users TO crypto_user;
    GRANT USAGE, SELECT ON SEQUENCE users_id_seq TO crypto_user;
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–∞–µ–º –ø—Ä–∞–≤–∞
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO crypto_user;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO crypto_user;
    """
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ sudo
    process = subprocess.run(
        ['sudo', '-u', 'postgres', 'psql', 'crypto_leads', '-c', sql_commands],
        capture_output=True,
        text=True
    )
    
    if process.returncode == 0:
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        print("\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        async with engine.begin() as conn:
            result = await conn.execute(text("""
                SELECT column_name, data_type 
                FROM information_schema.columns 
                WHERE table_name = 'users'
                ORDER BY ordinal_position
            """))
            
            for col in result:
                print(f"  - {col[0]}: {col[1]}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {process.stderr}")

if __name__ == "__main__":
    asyncio.run(fix_database())
