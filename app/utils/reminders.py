"""
–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
"""
import asyncio
import json
from datetime import datetime
from aiogram import Bot
from app.database.queries import (
    get_unfinished_applications_for_reminder,
    mark_reminder_sent
)
from app.keyboards.user import InlineKeyboardMarkup, InlineKeyboardButton
from app.config import BOT_TOKEN


async def send_reminder(bot: Bot, user_id: int, current_step: str, data: dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∞–≥–∞
    if current_step == "name":
        text = "üîî <b>–í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞—è–≤–∫—É!</b>\n\n"
        text += "–û—Å—Ç–∞–ª—Å—è –≤—Å–µ–≥–æ –æ–¥–∏–Ω —à–∞–≥ –¥–æ –∑–∞–ø–∏—Å–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ.\n\n"
        text += "‚ö° <i>–ú–µ—Å—Ç–∞ –±—ã—Å—Ç—Ä–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è!</i>"
    
    elif current_step == "country":
        name = data.get('name', '–¥—Ä—É–≥')
        text = f"üîî <b>{name}, –≤—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏!</b>\n\n"
        text += "–í—ã –Ω–∞—á–∞–ª–∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å –∑–∞—è–≤–∫—É, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—Ç—Ä–∞–Ω—É.\n"
        text += "–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–µ–π—á–∞—Å, –ø–æ–∫–∞ –µ—Å—Ç—å –º–µ—Å—Ç–∞!\n\n"
        text += "üíé <i>–û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ 3 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞</i>"
    
    elif current_step == "phone":
        name = data.get('name', '–¥—Ä—É–≥')
        text = f"üîî <b>{name}, –Ω–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å!</b>\n\n"
        text += "–í—ã –ø–æ—á—Ç–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –∫—É—Ä—Å.\n"
        text += "–û—Å—Ç–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
        text += "üìû <i>–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∂–¥–µ—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É</i>"
    
    elif current_step == "contact_time":
        name = data.get('name', '–¥—Ä—É–≥')
        text = f"üîî <b>{name}, –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!</b>\n\n"
        text += "–í—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ø–æ—á—Ç–∏ –≤—Å—é –∑–∞—è–≤–∫—É!\n"
        text += "–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–≤–æ–Ω–∫–∞.\n\n"
        text += "‚úÖ <i>–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</i>"
    
    else:
        text = "üîî <b>–ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É!</b>\n\n"
        text += "–í—ã –Ω–∞—á–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ.\n"
        text += "–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å!\n\n"
        text += "üöÄ <i>–ú–µ—Å—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã!</i>"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ
    text += "\n\nüí¨ <i>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å 12 —á–µ–ª–æ–≤–µ–∫</i>"
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ",
            callback_data="continue_application"
        )
    ]])
    
    try:
        await bot.send_message(
            user_id,
            text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        await mark_reminder_sent(user_id)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def check_and_send_reminders(bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    unfinished = await get_unfinished_applications_for_reminder()
    
    for app in unfinished:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        data = json.loads(app.data) if app.data else {}
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await send_reminder(bot, app.user_id, app.current_step, data)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        await asyncio.sleep(1)
    
    if unfinished:
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(unfinished)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")


async def reminder_task(bot: Bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    while True:
        try:
            await check_and_send_reminders(bot)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        await asyncio.sleep(300)
