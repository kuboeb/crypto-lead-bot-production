"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–π–µ—Ä–∞–º–∏ (—Ä–µ–∫–ª–∞–º—â–∏–∫–∞–º–∏)
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import secrets
import string
from datetime import datetime

from app.admin.keyboards.admin import (
    get_buyers_keyboard, 
    get_buyer_sources_keyboard,
    get_back_keyboard
)
from app.admin.middleware.auth import AdminAuthMiddleware, check_admin_role
from app.database.models import AdminUser, Buyer, async_session, Application
from sqlalchemy import select, func, desc

router = Router(name="admin_buyers")
router.callback_query.middleware(AdminAuthMiddleware())
router.message.middleware(AdminAuthMiddleware())


class AddBuyerStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_telegram = State()
    choosing_source = State()
    waiting_for_pixel_data = State()


def generate_buyer_code(name: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –±–∞–π–µ—Ä–∞"""
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –∏–º–µ–Ω–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    prefix = ''.join(name.split()[:2]).lower()[:6]
    random_part = ''.join(secrets.choice(string.ascii_lowercase + string.digits) for _ in range(4))
    return f"buyer_{prefix}_{random_part}"


@router.callback_query(F.data == "admin:buyers")
async def show_buyers_menu(callback: CallbackQuery, admin: AdminUser):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–π–µ—Ä–∞–º–∏"""
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–π–µ—Ä–æ–≤
        buyers_count = await session.execute(
            select(func.count(Buyer.id)).where(Buyer.is_active == True)
        )
        count = buyers_count.scalar() or 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-3 –±–∞–π–µ—Ä–æ–≤ –ø–æ –∑–∞—è–≤–∫–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_start = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
        
        top_buyers = await session.execute(
            select(
                Buyer.name,
                func.count(Application.id).label('leads_count')
            ).join(
                Application,
                Application.referred_by == Buyer.buyer_code
            ).where(
                Application.created_at >= today_start
            ).group_by(
                Buyer.id
            ).order_by(
                desc('leads_count')
            ).limit(3)
        )
        
        top_text = ""
        for buyer_name, leads in top_buyers:
            top_text += f"‚Ä¢ {buyer_name}: {leads} –∑–∞—è–≤–æ–∫\n"
        
        if not top_text:
            top_text = "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
    
    text = f"""
üë• <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ô–ï–†–ê–ú–ò</b>

üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–π–µ—Ä–æ–≤: {count}

<b>–¢–æ–ø –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>
{top_text}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_buyers_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin:add_buyer")
@check_admin_role("admin")
async def start_add_buyer(callback: CallbackQuery, state: FSMContext, admin: AdminUser):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–π–µ—Ä–∞"""
    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–∞–π–µ—Ä–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–∞–π–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –∏–ª–∏ Team Alpha):",
        parse_mode="HTML"
    )
    await state.set_state(AddBuyerStates.waiting_for_name)
    await callback.answer()


@router.message(AddBuyerStates.waiting_for_name)
async def process_buyer_name(message: Message, state: FSMContext, admin: AdminUser):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–º—è –±–∞–π–µ—Ä–∞"""
    name = message.text.strip()
    
    if len(name) < 2:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(name=name)
    
    await message.answer(
        f"–ò–º—è: <b>{name}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ Telegram username –±–∞–π–µ—Ä–∞ (–±–µ–∑ @) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥, –æ—Ç–ø—Ä–∞–≤–∏–≤ -",
        parse_mode="HTML"
    )
    await state.set_state(AddBuyerStates.waiting_for_telegram)


@router.message(AddBuyerStates.waiting_for_telegram)
async def process_buyer_telegram(message: Message, state: FSMContext, admin: AdminUser):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç telegram –±–∞–π–µ—Ä–∞"""
    telegram = message.text.strip()
    
    if telegram != "-":
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        telegram = telegram.replace("@", "")
        await state.update_data(telegram_username=telegram)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ –±–∞–π–µ—Ä–∞:",
        reply_markup=get_buyer_sources_keyboard()
    )
    await state.set_state(AddBuyerStates.choosing_source)


@router.callback_query(AddBuyerStates.choosing_source, F.data.startswith("admin:buyer_source:"))
async def process_buyer_source(callback: CallbackQuery, state: FSMContext, admin: AdminUser):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞"""
    source = callback.data.split(":")[-1]
    await state.update_data(source_type=source)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –±–∞–π–µ—Ä–∞
    data = await state.get_data()
    buyer_code = generate_buyer_code(data['name'])
    await state.update_data(buyer_code=buyer_code)
    
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    if source == "facebook":
        text = f"""
‚úÖ <b>Facebook –≤—ã–±—Ä–∞–Ω</b>

–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –±–∞–π–µ—Ä–∞:
<code>https://t.me/{callback.bot.username}?start={buyer_code}_{{{{fbclid}}}}</code>

–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –±–∞–π–µ—Ä–∞ –ø—Ä–∏—Å–ª–∞—Ç—å:
1. Facebook Pixel ID
2. Access Token –¥–ª—è Conversions API

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>PIXEL_ID
ACCESS_TOKEN</code>

–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ - —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∑–∂–µ
"""
    elif source == "google":
        text = f"""
‚úÖ <b>Google Ads –≤—ã–±—Ä–∞–Ω</b>

–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –±–∞–π–µ—Ä–∞:
<code>https://t.me/{callback.bot.username}?start={buyer_code}_{{{{gclid}}}}</code>

‚ö†Ô∏è –í–ê–ñ–ù–û: gclid –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!

–û—Ç–ø—Ä–∞–≤—å—Ç–µ - —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
"""
    elif source in ["propeller", "richads", "evadav", "pushhouse", "onclick"]:
        text = f"""
‚úÖ <b>{source.title()} –≤—ã–±—Ä–∞–Ω</b>

–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –±–∞–π–µ—Ä–∞:
<code>https://t.me/{callback.bot.username}?start={buyer_code}_{{{{clickid}}}}</code>

Postback URL –¥–ª—è –±–∞–π–µ—Ä–∞:
<code>https://yourdomain.com/postback/{source}?buyer={buyer_code}&status=lead&payout=50</code>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ - —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
"""
    else:
        text = f"""
‚úÖ <b>–ò—Å—Ç–æ—á–Ω–∏–∫: {source}</b>

–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –±–∞–π–µ—Ä–∞:
<code>https://t.me/{callback.bot.username}?start={buyer_code}_{{{{subid}}}}</code>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –¥–ª—è postback –∏–ª–∏ - —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:
"""
    
    await callback.message.edit_text(text, parse_mode="HTML")
    await state.set_state(AddBuyerStates.waiting_for_pixel_data)
    await callback.answer()


@router.message(AddBuyerStates.waiting_for_pixel_data)
async def process_pixel_data(message: Message, state: FSMContext, admin: AdminUser):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª—è/postback"""
    data = await state.get_data()
    
    pixel_info = {}
    if message.text.strip() != "-":
        if data['source_type'] == 'facebook':
            lines = message.text.strip().split('\n')
            if len(lines) >= 2:
                pixel_info['fb_pixel_id'] = lines[0].strip()
                pixel_info['fb_access_token'] = lines[1].strip()
        else:
            pixel_info['postback_url'] = message.text.strip()
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–π–µ—Ä–∞ –≤ –ë–î
    async with async_session() as session:
        buyer = Buyer(
            name=data['name'],
            telegram_username=data.get('telegram_username'),
            source_type=data['source_type'],
            buyer_code=data['buyer_code'],
            **pixel_info
        )
        session.add(buyer)
        await session.commit()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    final_text = f"""
‚úÖ <b>–ë–∞–π–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>

<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –±–∞–π–µ—Ä–∞ {data['name']}:</b>

üìé –°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã:
<code>https://t.me/{message.bot.username}?start={data['buyer_code']}</code>

üìä –ò—Å—Ç–æ—á–Ω–∏–∫: {data['source_type']}
"""
    
    if data['source_type'] in ["propeller", "richads", "evadav", "pushhouse", "onclick"]:
        final_text += f"""
üîó Postback URL:
<code>https://yourdomain.com/postback/{data['source_type']}?buyer={data['buyer_code']}&status=lead&payout=50</code>
"""
    
    final_text += "\nüí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–∞–π–µ—Ä—É!"
    
    await message.answer(
        final_text,
        reply_markup=get_back_keyboard(),
        parse_mode="HTML"
    )
    await state.clear()


@router.callback_query(F.data == "admin:buyers_stats")
async def show_buyers_stats(callback: CallbackQuery, admin: AdminUser):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –±–∞–π–µ—Ä–∞–º"""
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–∞–π–µ—Ä–∞–º
        buyers_stats = await session.execute(
            select(
                Buyer.name,
                Buyer.source_type,
                Buyer.total_leads,
                Buyer.is_active,
                func.count(Application.id).label('today_leads')
            ).outerjoin(
                Application,
                (Application.referred_by == Buyer.buyer_code) & 
                (Application.created_at >= datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0))
            ).group_by(
                Buyer.id
            ).order_by(
                desc('today_leads')
            )
        )
        
        text = "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ô–ï–†–û–í</b>\n\n"
        
        for name, source, total, is_active, today in buyers_stats:
            status = "üü¢" if is_active else "üî¥"
            text += f"{status} <b>{name}</b> ({source})\n"
            text += f"‚îú‚îÄ –°–µ–≥–æ–¥–Ω—è: {today} –∑–∞—è–≤–æ–∫\n"
            text += f"‚îî‚îÄ –í—Å–µ–≥–æ: {total} –∑–∞—è–≤–æ–∫\n\n"
        
        if not text.endswith("\n\n"):
            text = "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ô–ï–†–û–í</b>\n\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–∞–π–µ—Ä–æ–≤."
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()
