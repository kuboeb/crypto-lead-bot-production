"""
–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
"""
import psutil
import platform
import os
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import CallbackQuery

from app.admin.keyboards.admin import get_back_keyboard
from app.admin.middleware.auth import AdminAuthMiddleware
from app.database.models import AdminUser, Application, async_session
from sqlalchemy import select, func, text

router = Router(name="admin_system")
router.callback_query.middleware(AdminAuthMiddleware())


def get_size(bytes):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
        if bytes < 1024.0:
            return f"{bytes:.2f} {unit}"
        bytes /= 1024.0


def draw_bar(percent, width=10):
    """–†–∏—Å—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"""
    filled = int(width * percent / 100)
    return "‚ñà" * filled + "‚ñë" * (width - filled)


@router.callback_query(F.data == "admin:system")
async def show_system_info(callback: CallbackQuery, admin: AdminUser):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    cpu_percent = psutil.cpu_percent(interval=1)
    memory = psutil.virtual_memory()
    disk = psutil.disk_usage('/')
    
    # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    boot_time = datetime.fromtimestamp(psutil.boot_time())
    uptime = datetime.now() - boot_time
    days = uptime.days
    hours = uptime.seconds // 3600
    minutes = (uptime.seconds % 3600) // 60
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –±–æ—Ç–∞
    process = psutil.Process(os.getpid())
    bot_memory = process.memory_info().rss / 1024 / 1024  # –í MB
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
    async with async_session() as session:
        # –†–∞–∑–º–µ—Ä –ë–î (–¥–ª—è PostgreSQL)
        try:
            db_size = await session.execute(
                text("SELECT pg_database_size(current_database())")
            )
            db_size_mb = db_size.scalar() / 1024 / 1024
        except:
            db_size_mb = 0
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        total_applications = await session.execute(
            select(func.count(Application.id))
        )
        apps_count = total_applications.scalar() or 0
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try:
            active_connections = await session.execute(
                text("SELECT count(*) FROM pg_stat_activity WHERE state = 'active'")
            )
            connections = active_connections.scalar() or 0
        except:
            connections = 0
    
    text = f"""
‚öôÔ∏è <b>–°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´</b>

<b>–°–µ—Ä–≤–µ—Ä:</b>
‚îú‚îÄ CPU: {cpu_percent}% {draw_bar(cpu_percent)}
‚îú‚îÄ RAM: {get_size(memory.used)}/{get_size(memory.total)} ({memory.percent}%) {draw_bar(memory.percent)}
‚îú‚îÄ –î–∏—Å–∫: {get_size(disk.used)}/{get_size(disk.total)} ({disk.percent}%) {draw_bar(disk.percent)}
‚îî‚îÄ Uptime: {days} –¥–Ω–µ–π {hours}:{minutes:02d}

<b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>
‚îú‚îÄ PostgreSQL: üü¢ –†–∞–±–æ—Ç–∞–µ—Ç
‚îú‚îÄ –†–∞–∑–º–µ—Ä –ë–î: {db_size_mb:.1f} MB
‚îú‚îÄ –ó–∞—è–≤–æ–∫: {apps_count:,}
‚îú‚îÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {connections}/100
‚îî‚îÄ –ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø: 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥

<b>–ë–æ—Ç:</b>
‚îú‚îÄ –°—Ç–∞—Ç—É—Å: üü¢ –û–Ω–ª–∞–π–Ω
‚îú‚îÄ –ü–∞–º—è—Ç—å: {bot_memory:.1f} MB
‚îú‚îÄ PID: {os.getpid()}
‚îú‚îÄ Python: {platform.python_version()}
‚îî‚îÄ –í–µ—Ä—Å–∏—è: 1.3.0

<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b>
‚îú‚îÄ –û–°: {platform.system()} {platform.release()}
‚îú‚îÄ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.machine()}
‚îî‚îÄ –•–æ—Å—Ç: {platform.node()}
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()
