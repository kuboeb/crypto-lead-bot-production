"""
–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –≤–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery
from datetime import datetime, timedelta

from app.admin.keyboards.admin import get_back_keyboard
from app.admin.middleware.auth import AdminAuthMiddleware
from app.database.models import AdminUser, Application, UnfinishedApplication, async_session
from sqlalchemy import select, func, and_, or_

router = Router(name="admin_analytics")
router.callback_query.middleware(AdminAuthMiddleware())


async def get_funnel_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ—Ä–æ–Ω–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    async with async_session() as session:
        today_start = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
        
        # –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ
        # –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥, –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        completed = await session.execute(
            select(func.count(Application.id)).where(
                Application.created_at >= today_start
            )
        )
        completed_count = completed.scalar() or 0
        
        # –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ —à–∞–≥–∞–º
        unfinished_stats = await session.execute(
            select(
                UnfinishedApplication.current_step,
                func.count(func.distinct(UnfinishedApplication.user_id))
            ).where(
                UnfinishedApplication.created_at >= today_start
            ).group_by(UnfinishedApplication.current_step)
        )
        
        steps_count = {}
        for step, count in unfinished_stats:
            steps_count[step] = count
        
        # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–∏
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Ç—Ä–µ–∫–∞—Ç—å –∫–∞–∂–¥—ã–π —à–∞–≥
        total_starts = completed_count * 5  # –ü—Ä–∏–º–µ—Ä–Ω–æ
        clicked_apply = completed_count * 2.5  # –ü—Ä–∏–º–µ—Ä–Ω–æ
        started_filling = completed_count * 2  # –ü—Ä–∏–º–µ—Ä–Ω–æ
        
        entered_name = steps_count.get('country', 0) + steps_count.get('phone', 0) + steps_count.get('contact_time', 0) + completed_count
        entered_country = steps_count.get('phone', 0) + steps_count.get('contact_time', 0) + completed_count
        entered_phone = steps_count.get('contact_time', 0) + completed_count
        
        return {
            'total_starts': int(total_starts),
            'clicked_apply': int(clicked_apply),
            'started_filling': int(started_filling),
            'entered_name': entered_name,
            'entered_country': entered_country,
            'entered_phone': entered_phone,
            'completed': completed_count
        }


def draw_progress_bar(value: int, max_value: int, width: int = 20) -> str:
    """–†–∏—Å—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    if max_value == 0:
        return "‚ñë" * width
    
    filled = int((value / max_value) * width)
    return "‚ñà" * filled + "‚ñë" * (width - filled)


@router.callback_query(F.data == "admin:funnel")
async def show_funnel(callback: CallbackQuery, admin: AdminUser):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ—Ä–æ–Ω–∫—É –ø—Ä–æ–¥–∞–∂"""
    stats = await get_funnel_stats()
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    total = stats['total_starts'] or 1  # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
    
    text = f"""
üìä <b>–í–û–†–û–ù–ö–ê –ü–†–û–î–ê–ñ</b>
<i>–ó–∞ —Å–µ–≥–æ–¥–Ω—è ({datetime.now().strftime('%d.%m.%Y')})</i>

/start –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:        {stats['total_starts']:>4} {draw_progress_bar(stats['total_starts'], total)} 100%
–ù–∞–∂–∞–ª–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è":      {stats['clicked_apply']:>4} {draw_progress_bar(stats['clicked_apply'], total)} {int(stats['clicked_apply']/total*100)}%
–ù–∞—á–∞–ª–∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å:         {stats['started_filling']:>4} {draw_progress_bar(stats['started_filling'], total)} {int(stats['started_filling']/total*100)}%
–í–≤–µ–ª–∏ –∏–º—è:               {stats['entered_name']:>4} {draw_progress_bar(stats['entered_name'], total)} {int(stats['entered_name']/total*100)}%
–í–≤–µ–ª–∏ —Å—Ç—Ä–∞–Ω—É:            {stats['entered_country']:>4} {draw_progress_bar(stats['entered_country'], total)} {int(stats['entered_country']/total*100)}%
–í–≤–µ–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω:           {stats['entered_phone']:>4} {draw_progress_bar(stats['entered_phone'], total)} {int(stats['entered_phone']/total*100)}%
–ó–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞—è–≤–∫—É:        {stats['completed']:>4} {draw_progress_bar(stats['completed'], total)} {int(stats['completed']/total*100)}%

"""
    
    # –ê–Ω–∞–ª–∏–∑ —É–∑–∫–∏—Ö –º–µ—Å—Ç
    if stats['entered_country'] > 0 and stats['entered_phone'] > 0:
        phone_drop = ((stats['entered_country'] - stats['entered_phone']) / stats['entered_country']) * 100
        if phone_drop > 30:
            text += f"‚ö†Ô∏è <b>–ü–†–û–ë–õ–ï–ú–ê:</b> {int(phone_drop)}% –±—Ä–æ—Å–∞—é—Ç –Ω–∞ –≤–≤–æ–¥–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n"
            text += "üí° <i>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–ø—Ä–æ—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –º–æ—Ç–∏–≤–∞—Ü–∏—é</i>"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()
