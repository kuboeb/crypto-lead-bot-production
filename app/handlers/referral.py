"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

from app.config import MESSAGES
from app.database.queries import (
    user_has_application, 
    get_user_referrals_count,
    save_referral,
    get_application_by_user_id
)

router = Router(name="referral")


def generate_referral_link(user_id: int, bot_username: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"""
    return f"https://t.me/{bot_username}?start=ref_{user_id}"


def get_share_keyboard(referral_link: str, share_text: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —à–µ—Ä–∏–Ω–≥–∞"""
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram
    builder.row(
        InlineKeyboardButton(
            text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram",
            url=f"https://t.me/share/url?url={referral_link}&text={share_text}"
        )
    )
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ WhatsApp
    builder.row(
        InlineKeyboardButton(
            text="üíö –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ WhatsApp",
            url=f"https://wa.me/?text={share_text} {referral_link}"
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_start"
        )
    )
    
    return builder.as_markup()


@router.callback_query(F.data == "show_referral_program")
async def show_referral_program(callback: CallbackQuery, bot: Bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞—è–≤–∫–∞
    if not await user_has_application(callback.from_user.id):
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    referral_link = generate_referral_link(callback.from_user.id, bot_username)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö
    referrals_count = await get_user_referrals_count(callback.from_user.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = MESSAGES['referral_program'].format(referral_link=referral_link)
    if referrals_count > 0:
        text += f"\n\nüë• <b>–í—ã —É–∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: {referrals_count} —á–µ–ª.</b>"
        text += f"\nüí∞ <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: {referrals_count * 50}‚Ç¨</b>"
    
    # –¢–µ–∫—Å—Ç –¥–ª—è —à–µ—Ä–∏–Ω–≥–∞ (URL encoded)
    share_text = MESSAGES['referral_share_message'].format(referral_link=referral_link)
    import urllib.parse
    share_text_encoded = urllib.parse.quote(share_text)
    
    await callback.message.edit_text(
        text,
        reply_markup=get_share_keyboard(referral_link, share_text_encoded),
        parse_mode="HTML"
    )
    await callback.answer()


async def process_referral_link(message: Message, state: FSMContext, referrer_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if referrer_id == message.from_user.id:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∑–∞—è–≤–∫–∞
        referrer_app = await get_application_by_user_id(referrer_id)
        if referrer_app:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            welcome_text = MESSAGES['referred_welcome'].format(
                referrer_name=referrer_app.name
            )
            await message.answer(welcome_text, parse_mode="HTML")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(referred_by=referrer_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")
