"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
"""
import re
import json
from datetime import datetime
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from app.config import MESSAGES, ADMIN_ID
from app.states.application import ApplicationStates
from app.keyboards.user import (
    get_phone_keyboard, 
    get_contact_time_keyboard,
    get_cancel_keyboard,
    get_success_keyboard
)
from app.database.queries import (
    create_application, 
    user_has_application,
    save_unfinished_application,
    get_recent_applications_count,
    get_recent_applications
)

router = Router(name="application")


def get_progress_bar(current_step: int, total_steps: int = 4) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    filled = "‚ñì" * current_step
    empty = "‚ñë" * (total_steps - current_step)
    percentage = (current_step / total_steps) * 100
    return f"{filled}{empty} {percentage:.0f}%"


def get_social_proof() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ"""
    import random
    messages = [
        "üí´ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –∑–∞–ø–∏—Å–∞–ª–æ—Å—å 7 —á–µ–ª–æ–≤–µ–∫",
        "üî• –û—Å—Ç–∞–ª–æ—Å—å 12 –º–µ—Å—Ç –≤ –≥—Ä—É–ø–ø–µ",
        "‚ö° –ú–∏—Ö–∞–∏–ª –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–ø–∏—Å–∞–ª—Å—è",
        "üéØ –£–∂–µ 89 —á–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç –æ–±—É—á–µ–Ω–∏–µ",
        "‚ú® –ê–Ω–Ω–∞ –∏–∑ –§—Ä–∞–Ω—Ü–∏–∏ –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å 1500‚Ç¨/–º–µ—Å"
    ]
    return random.choice(messages)


@router.callback_query(F.data == "start_application")
async def start_application(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞—è–≤–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∏
    if await user_has_application(callback.from_user.id):
        await callback.message.edit_text(
            MESSAGES['already_applied'],
            parse_mode="HTML"
        )
        await callback.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞!")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ
    social_proof = get_social_proof()
    progress = get_progress_bar(1)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
    text = f"<b>–®–∞–≥ 1 –∏–∑ 4</b> {progress}\n\n"
    text += MESSAGES['ask_name']
    text += f"\n\n<i>{social_proof}</i>"
    
    await callback.message.edit_text(text, parse_mode="HTML")
    await state.set_state(ApplicationStates.waiting_for_name)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    await save_unfinished_application(
        user_id=callback.from_user.id,
        username=callback.from_user.username,
        current_step="name",
        data={}
    )
    
    await callback.answer()


@router.message(ApplicationStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã
    if not re.match(r'^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s]+$', name):
        await message.answer(
            MESSAGES['invalid_name'],
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    await state.update_data(name=name)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress = get_progress_bar(2)
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
    text = f"<b>–®–∞–≥ 2 –∏–∑ 4</b> {progress}\n\n"
    text += f"–û—Ç–ª–∏—á–Ω–æ, {name}! "
    text += MESSAGES['ask_country']
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –∑–∞—è–≤–∫–∏
    recent_count = await get_recent_applications_count(hours=1)
    if recent_count > 0:
        text += f"\n\n<i>üí° –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –∫ –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–æ—Å—å {recent_count} —á–µ–ª–æ–≤–µ–∫(–∞)</i>"
    
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    data = await state.get_data()
    await save_unfinished_application(
        user_id=message.from_user.id,
        username=message.from_user.username,
        current_step="country",
        data=data
    )
    
    await state.set_state(ApplicationStates.waiting_for_country)


@router.message(ApplicationStates.waiting_for_country)
async def process_country(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω—ã"""
    country = message.text.strip()
    
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if len(country) < 2 or not re.match(r'^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s\-]+$', country):
        await message.answer(
            MESSAGES['invalid_country'],
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω—É
    await state.update_data(country=country)
    data = await state.get_data()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress = get_progress_bar(3)
    
    text = f"<b>–®–∞–≥ 3 –∏–∑ 4</b> {progress}\n\n"
    text += f"–°—É–ø–µ—Ä, {data['name']}! "
    text += MESSAGES['ask_phone']
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É –∏–∑ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã
    recent_apps = await get_recent_applications(limit=10)
    for app in recent_apps:
        if app.country.lower() == country.lower():
            text += f"\n\n<i>üåç –ö—Å—Ç–∞—Ç–∏, –∏–∑ {country} –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–ø–∏—Å–∞–ª—Å—è {app.name}</i>"
            break
    
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=get_phone_keyboard()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    await save_unfinished_application(
        user_id=message.from_user.id,
        username=message.from_user.username,
        current_step="phone",
        data=data
    )
    
    await state.set_state(ApplicationStates.waiting_for_phone)


@router.message(ApplicationStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = None
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    if message.contact:
        phone = message.contact.phone_number
        if not phone.startswith('+'):
            phone = '+' + phone
    else:
        # –ï—Å–ª–∏ –≤–≤–µ–ª –≤—Ä—É—á–Ω—É—é
        phone = message.text.strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        if not re.match(r'^\+\d{10,15}$', phone):
            await message.answer(
                MESSAGES['invalid_phone'],
                parse_mode="HTML",
                reply_markup=get_phone_keyboard()
            )
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    await state.update_data(phone=phone)
    data = await state.get_data()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress = get_progress_bar(4)
    
    text = f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!</b> {progress}\n\n"
    text += f"–û—Ç–ª–∏—á–Ω–æ, {data['name']}! "
    text += MESSAGES['ask_time']
    text += "\n\n<i>üéØ –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–∞—à–µ –º–µ—Å—Ç–æ –±—É–¥–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ!</i>"
    
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=get_contact_time_keyboard()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    await save_unfinished_application(
        user_id=message.from_user.id,
        username=message.from_user.username,
        current_step="contact_time",
        data=data
    )
    
    await state.set_state(ApplicationStates.waiting_for_contact_time)


@router.callback_query(ApplicationStates.waiting_for_contact_time, F.data.startswith("time:"))
async def process_contact_time(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–≤—è–∑–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–∑ callback data
    contact_time = callback.data.split(":", 1)[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    try:
        # –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É –≤ –ë–î
        application = await create_application(
            user_id=callback.from_user.id,
            username=callback.from_user.username,
            name=data['name'],
            country=data['country'],
            phone=data['phone'],
            contact_time=contact_time
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.edit_text(
            MESSAGES['success'],
            parse_mode="HTML",
            reply_markup=get_success_keyboard()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_text = MESSAGES['admin_notification'].format(
            name=data['name'],
            country=data['country'],
            phone=data['phone'],
            contact_time=contact_time,
            created_at=application.created_at.strftime("%d.%m.%Y %H:%M"),
            user_id=callback.from_user.id
        )
        
        try:
            await bot.send_message(
                ADMIN_ID,
                admin_text,
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await callback.message.edit_text(
            MESSAGES['error'],
            parse_mode="HTML"
        )
    
    await callback.answer()


@router.callback_query(F.data == "continue_application")
async def continue_application(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É –∏–∑ –ë–î
    from app.database.models import async_session, UnfinishedApplication
    from sqlalchemy import select
    
    async with async_session() as session:
        result = await session.execute(
            select(UnfinishedApplication).where(
                UnfinishedApplication.user_id == callback.from_user.id
            )
        )
        unfinished = result.scalar_one_or_none()
    
    if not unfinished:
        await callback.message.edit_text(
            "–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ /start",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = json.loads(unfinished.data) if unfinished.data else {}
    await state.update_data(**data)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —à–∞–≥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if unfinished.current_step == "name":
        progress = get_progress_bar(1)
        text = f"<b>–®–∞–≥ 1 –∏–∑ 4</b> {progress}\n\n"
        text += MESSAGES['ask_name']
        await callback.message.edit_text(text, parse_mode="HTML")
        await state.set_state(ApplicationStates.waiting_for_name)
        
    elif unfinished.current_step == "country":
        progress = get_progress_bar(2)
        text = f"<b>–®–∞–≥ 2 –∏–∑ 4</b> {progress}\n\n"
        text += f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {data.get('name', '')}! "
        text += MESSAGES['ask_country']
        await callback.message.edit_text(text, parse_mode="HTML")
        await state.set_state(ApplicationStates.waiting_for_country)
        
    elif unfinished.current_step == "phone":
        progress = get_progress_bar(3)
        text = f"<b>–®–∞–≥ 3 –∏–∑ 4</b> {progress}\n\n"
        text += f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, {data.get('name', '')}! "
        text += MESSAGES['ask_phone']
        await callback.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=get_phone_keyboard()
        )
        await callback.message.delete()
        await state.set_state(ApplicationStates.waiting_for_phone)
        
    elif unfinished.current_step == "contact_time":
        progress = get_progress_bar(4)
        text = f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!</b> {progress}\n\n"
        text += f"–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ, {data.get('name', '')}! "
        text += MESSAGES['ask_time']
        await callback.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=get_contact_time_keyboard()
        )
        await callback.message.delete()
        await state.set_state(ApplicationStates.waiting_for_contact_time)
    
    await callback.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å!")


@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
@router.callback_query(F.data == "cancel_application")
async def cancel_application(update: Message | CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏"""
    await state.clear()
    
    if isinstance(update, CallbackQuery):
        await update.message.edit_text(
            MESSAGES['cancelled'],
            parse_mode="HTML"
        )
        await update.answer()
    else:
        await update.answer(
            MESSAGES['cancelled'],
            parse_mode="HTML",
            reply_markup=ReplyKeyboardRemove()
        )
